<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:websocket="http://www.springframework.org/schema/websocket"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!--引入dbcp数据源属性文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" ignore-unresolvable="true" />

	<!--引入jms属性文件 -->
	<context:property-placeholder
		location="classpath:jms.properties" ignore-unresolvable="true" />
		
	<!--引入jpa属性文件 -->
	<context:property-placeholder
		location="classpath:jpa.properties" ignore-unresolvable="true" />
	
	<!--引入其他公共属性文件 -->
	<context:property-placeholder
		location="classpath:common.properties" ignore-unresolvable="true" />

	<!-- aop代理 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- 扫包 -->
	<context:component-scan
		base-package="com.oocl.business">
		<!-- Controller不扫 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller"></context:exclude-filter>
	</context:component-scan>

	<!-- dbcp数据源配置 -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- jpa适配器 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform"
			value="org.hibernate.dialect.OracleDialect" />
	</bean>


	<!-- JPA实体管理工厂的配置 使用@PersistenceContext会自动注入EntityManager,可以使用 @PersistenceUnit注入entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="persistenceUnitName" value="em"></property>
		<property name="jpaVendorAdapter"
			ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="${jpa.entityPackageName}" /><!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">${jpa.show_sql}</prop>
				<prop key="hibernate.format_sql">${jpa.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${jpa.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>


	<!-- Jpa 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- spring jms -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory"
		class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${jms.brokerUrl}" />
	</bean>

	<bean id="pooledConnectionFactory"
		class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory"
			ref="targetConnectionFactory" />
		<property name="maxConnections" value="10" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory"
			ref="pooledConnectionFactory" />
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate"
		class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>

	<!--这个是队列目的地，点对点的 -->
	<bean id="queueDestination"
		class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>${jms.queueName}</value>
		</constructor-arg>
	</bean>

	<bean id="jmsUtil" class="com.oocl.business.util.JmsUtil"></bean>

	<websocket:handlers allowed-origins="*">
		<websocket:mapping path="/businessSocket" handler="socketHandler" />
		<websocket:handshake-interceptors>
			<bean class="com.oocl.business.interceptor.BusinessSocketInterceptor" />
		</websocket:handshake-interceptors>
	</websocket:handlers>


	<bean id="socketHandler"
		  class="com.oocl.business.handler.BusinessSocket" />
</beans>